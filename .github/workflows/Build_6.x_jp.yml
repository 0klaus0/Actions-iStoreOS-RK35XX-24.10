name: Build iStore OS 6.x (JPTV Only)

on:
  workflow_dispatch:
    inputs:
      device:
        description: '编译目标设备'
        required: true
        default: 'jptv_rk3566'

env:
  REPO_URL: https://github.com/0klaus0/istoreos
  REPO_BRANCH: istoreos-24.10
  FEEDS_CONF: feeds.conf
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1-6.x.sh
  DIY_P2_SH: diy-part2-6.x.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: 合并磁盘
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: 准备完成
      uses: actions/checkout@main

    - name: 创建工作目录
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/workdir
        chmod 755 ${GITHUB_WORKSPACE}/workdir
        echo "WORKDIR=$PWD" >> $GITHUB_ENV

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/depends/ubuntu-22.04)
        wget https://bootstrap.pypa.io/pip/3.6/get-pip.py
        sudo python3 get-pip.py
        sudo rm -rf get-pip.py
        sudo pip install pyelftools
        docker rmi `docker images -q` || true
        docker image prune -a -f
        sudo timedatectl set-timezone "$TZ"

    - name: 克隆源码
      working-directory: ${{ env.WORKDIR }}/workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf ${{ env.WORKDIR }}/workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载自定义 feeds
      run: |
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/$CONFIG_FILE
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 编译 JPTV 固件
      run: |
        cd openwrt
        echo "使用设备: ${{ github.event.inputs.device }}"
        make ${{ github.event.inputs.device }}_defconfig
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理固件文件
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H.%M")-jptv" >> ${GITHUB_OUTPUT}
        touch release.txt
        echo "
        💻 设备: ${{ github.event.inputs.device }}

        📂 源码: ${{ env.REPO_URL }}

        🌳 分支: $REPO_BRANCH

        ⏱️ 编译时间: $(date +"%Y年%m月%d日%H时%M分")

        🌐 默认管理地址: 192.168.100.1

        👤 用户名: root
        🔒 密码: password
        " >> release.txt
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 自动发布固件到 Releases
      uses: softprops/action-gh-release@v2
      if: !cancelled()
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除旧的 workflow 运行记录
      uses: xiaomeng9597/delete-workflow-runs@main
      with:
        retain_days: 20
        keep_minimum_runs: 15
        token: ${{ env.GITHUB_TOKEN }}

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@v0.3.3
      with:
        keep_latest: 60
        delete_tags: true
